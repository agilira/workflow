name: Auto Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          
      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest semver tag, fallback to v1.0.0 if none exists
          LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.0.0"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Analyze commits for version bump
        id: version_bump
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          # Get commits since last tag
          if [ "$LATEST_TAG" = "v1.0.0" ] && ! git tag | grep -q "v1.0.0"; then
            # No tags exist yet, analyze all commits
            COMMITS=$(git log --pretty=format:"%s" --since="1 week ago")
          else
            # Get commits since last tag
            COMMITS=$(git log --pretty=format:"%s" "$LATEST_TAG"..HEAD)
          fi
          
          echo "Analyzing commits:"
          echo "$COMMITS"
          
          # Determine version bump type based on conventional commits
          BUMP_TYPE="none"
          
          if echo "$COMMITS" | grep -q "^feat\!"; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -q "^feat"; then
            BUMP_TYPE="minor"
          elif echo "$COMMITS" | grep -qE "^(fix|chore|docs|style|refactor|perf|test)"; then
            BUMP_TYPE="patch"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Version bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        if: steps.version_bump.outputs.bump_type != 'none'
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          # Remove 'v' prefix and split version
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Bump version based on type
          case $BUMP_TYPE in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create and push tag
        if: steps.version_bump.outputs.bump_type != 'none'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          
          # Create annotated tag with commit messages since last tag
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          
          if [ "$LATEST_TAG" = "v1.0.0" ] && ! git tag | grep -q "v1.0.0"; then
            CHANGELOG=$(git log --pretty=format:"- %s" --since="1 week ago")
          else
            CHANGELOG=$(git log --pretty=format:"- %s" "$LATEST_TAG"..HEAD)
          fi
          
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION

          Changes:
          $CHANGELOG"
          
          # Push the tag (this will trigger release-automation.yml)
          git push origin "$NEW_VERSION"
          
          echo "✅ Created and pushed tag: $NEW_VERSION"

      - name: No changes detected
        if: steps.version_bump.outputs.bump_type == 'none'
        run: |
          echo "ℹ️  No version-worthy changes detected since last tag"
          echo "   Use conventional commit messages to trigger releases:"
          echo "   - feat: new feature (minor version bump)"
          echo "   - fix: bug fix (patch version bump)"  
          echo "   - feat!: breaking change (major version bump)"