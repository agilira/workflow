name: Go CI/CD

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: false
        default: 'stable'
        type: string
      working-directory:
        description: 'Working directory for the project'
        required: false
        default: '.'
        type: string
      gosec-config:
        description: 'Path to gosec configuration file'
        required: false
        default: '.gosec.json'
        type: string
      skip-macos:
        description: 'Skip macOS testing for faster CI'
        required: false
        default: false
        type: boolean
    secrets:
      CODECOV_TOKEN:
        description: 'Codecov token for coverage upload'
        required: false

env:
  CGO_ENABLED: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ inputs.go-version }}
        cache: true
        cache-dependency-path: ${{ inputs.working-directory }}/go.sum

    - name: Install Dependencies
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Go Format Check
      run: |
        if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
          echo "Code not formatted:"
          gofmt -l .
          exit 1
        fi

    - name: Go Vet
      run: go vet ./...

    - name: Verify Dependencies
      run: go mod verify

    - name: Staticcheck
      run: staticcheck ./...

    - name: Vulnerability Check
      run: govulncheck ./...

    - name: Security Scan (gosec)
      continue-on-error: true
      run: |
        echo "Running security scan..."
        if [ -f "${{ inputs.gosec-config }}" ]; then
          gosec -conf ${{ inputs.gosec-config }} ./... || true
        else
          gosec ./... || true
        fi
        echo "Security scan completed"

    - name: Test with Race Detection
      env:
        GOFLAGS: -buildvcs=false
      run: go test -race -timeout 5m -v ./...

    - name: Test Coverage
      run: |
        go test -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ${{ inputs.working-directory }}/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN || '' }}

  build:
    name: Build Matrix
    strategy:
      fail-fast: false
      matrix:
        # Skip macOS for Dependabot PRs (faster CI) or when explicitly requested
        os: ${{ (github.actor == 'dependabot[bot]' || inputs.skip-macos == true) && fromJSON('["ubuntu-latest", "windows-latest"]') || fromJSON('["ubuntu-latest", "windows-latest", "macos-latest"]') }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Setup Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ inputs.go-version }}
        cache: true
        cache-dependency-path: ${{ inputs.working-directory }}/go.sum

    - name: Build
      run: go build -v ./...

    - name: Short Test (no race, faster)
      run: go test -short -timeout 5m ./...